/* 
 * ORY Hydra - Cloud Native OAuth 2.0 and OpenID Connect Server
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here. Keep in mind that this document reflects the latest branch, always. Support for versioned documentation is coming in the future.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ConsentRequestAcceptance {
  /// AccessTokenExtra represents arbitrary data that will be added to the access token and that will be returned on introspection and warden requests.
  #[serde(rename = "accessTokenExtra")]
  access_token_extra: Option<::std::collections::HashMap<String, Value>>,
  /// A list of scopes that the user agreed to grant. It should be a subset of requestedScopes from the consent request.
  #[serde(rename = "grantScopes")]
  grant_scopes: Option<Vec<String>>,
  /// IDTokenExtra represents arbitrary data that will be added to the ID token. The ID token will only be issued if the user agrees to it and if the client requested an ID token.
  #[serde(rename = "idTokenExtra")]
  id_token_extra: Option<::std::collections::HashMap<String, Value>>,
  /// Subject represents a unique identifier of the user (or service, or legal entity, ...) that accepted the OAuth2 request.
  #[serde(rename = "subject")]
  subject: Option<String>
}

impl ConsentRequestAcceptance {
  pub fn new() -> ConsentRequestAcceptance {
    ConsentRequestAcceptance {
      access_token_extra: None,
      grant_scopes: None,
      id_token_extra: None,
      subject: None
    }
  }

  pub fn set_access_token_extra(&mut self, access_token_extra: ::std::collections::HashMap<String, Value>) {
    self.access_token_extra = Some(access_token_extra);
  }

  pub fn with_access_token_extra(mut self, access_token_extra: ::std::collections::HashMap<String, Value>) -> ConsentRequestAcceptance {
    self.access_token_extra = Some(access_token_extra);
    self
  }

  pub fn access_token_extra(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self.access_token_extra.as_ref()
  }

  pub fn reset_access_token_extra(&mut self) {
    self.access_token_extra = None;
  }

  pub fn set_grant_scopes(&mut self, grant_scopes: Vec<String>) {
    self.grant_scopes = Some(grant_scopes);
  }

  pub fn with_grant_scopes(mut self, grant_scopes: Vec<String>) -> ConsentRequestAcceptance {
    self.grant_scopes = Some(grant_scopes);
    self
  }

  pub fn grant_scopes(&self) -> Option<&Vec<String>> {
    self.grant_scopes.as_ref()
  }

  pub fn reset_grant_scopes(&mut self) {
    self.grant_scopes = None;
  }

  pub fn set_id_token_extra(&mut self, id_token_extra: ::std::collections::HashMap<String, Value>) {
    self.id_token_extra = Some(id_token_extra);
  }

  pub fn with_id_token_extra(mut self, id_token_extra: ::std::collections::HashMap<String, Value>) -> ConsentRequestAcceptance {
    self.id_token_extra = Some(id_token_extra);
    self
  }

  pub fn id_token_extra(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self.id_token_extra.as_ref()
  }

  pub fn reset_id_token_extra(&mut self) {
    self.id_token_extra = None;
  }

  pub fn set_subject(&mut self, subject: String) {
    self.subject = Some(subject);
  }

  pub fn with_subject(mut self, subject: String) -> ConsentRequestAcceptance {
    self.subject = Some(subject);
    self
  }

  pub fn subject(&self) -> Option<&String> {
    self.subject.as_ref()
  }

  pub fn reset_subject(&mut self) {
    self.subject = None;
  }

}



