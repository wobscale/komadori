/* 
 * ORY Hydra - Cloud Native OAuth 2.0 and OpenID Connect Server
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here. Keep in mind that this document reflects the latest branch, always. Support for versioned documentation is coming in the future.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Policy {
  /// Actions impacted by the policy.
  #[serde(rename = "actions")]
  actions: Option<Vec<String>>,
  /// Conditions under which the policy is active.
  #[serde(rename = "conditions")]
  conditions: Option<::std::collections::HashMap<String, Value>>,
  /// Description of the policy.
  #[serde(rename = "description")]
  description: Option<String>,
  /// Effect of the policy
  #[serde(rename = "effect")]
  effect: Option<String>,
  /// ID of the policy.
  #[serde(rename = "id")]
  id: Option<String>,
  /// Resources impacted by the policy.
  #[serde(rename = "resources")]
  resources: Option<Vec<String>>,
  /// Subjects impacted by the policy.
  #[serde(rename = "subjects")]
  subjects: Option<Vec<String>>
}

impl Policy {
  pub fn new() -> Policy {
    Policy {
      actions: None,
      conditions: None,
      description: None,
      effect: None,
      id: None,
      resources: None,
      subjects: None
    }
  }

  pub fn set_actions(&mut self, actions: Vec<String>) {
    self.actions = Some(actions);
  }

  pub fn with_actions(mut self, actions: Vec<String>) -> Policy {
    self.actions = Some(actions);
    self
  }

  pub fn actions(&self) -> Option<&Vec<String>> {
    self.actions.as_ref()
  }

  pub fn reset_actions(&mut self) {
    self.actions = None;
  }

  pub fn set_conditions(&mut self, conditions: ::std::collections::HashMap<String, Value>) {
    self.conditions = Some(conditions);
  }

  pub fn with_conditions(mut self, conditions: ::std::collections::HashMap<String, Value>) -> Policy {
    self.conditions = Some(conditions);
    self
  }

  pub fn conditions(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self.conditions.as_ref()
  }

  pub fn reset_conditions(&mut self) {
    self.conditions = None;
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> Policy {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_effect(&mut self, effect: String) {
    self.effect = Some(effect);
  }

  pub fn with_effect(mut self, effect: String) -> Policy {
    self.effect = Some(effect);
    self
  }

  pub fn effect(&self) -> Option<&String> {
    self.effect.as_ref()
  }

  pub fn reset_effect(&mut self) {
    self.effect = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> Policy {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_resources(&mut self, resources: Vec<String>) {
    self.resources = Some(resources);
  }

  pub fn with_resources(mut self, resources: Vec<String>) -> Policy {
    self.resources = Some(resources);
    self
  }

  pub fn resources(&self) -> Option<&Vec<String>> {
    self.resources.as_ref()
  }

  pub fn reset_resources(&mut self) {
    self.resources = None;
  }

  pub fn set_subjects(&mut self, subjects: Vec<String>) {
    self.subjects = Some(subjects);
  }

  pub fn with_subjects(mut self, subjects: Vec<String>) -> Policy {
    self.subjects = Some(subjects);
    self
  }

  pub fn subjects(&self) -> Option<&Vec<String>> {
    self.subjects.as_ref()
  }

  pub fn reset_subjects(&mut self) {
    self.subjects = None;
  }

}



