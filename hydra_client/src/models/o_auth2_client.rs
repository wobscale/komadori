/* 
 * ORY Hydra - Cloud Native OAuth 2.0 and OpenID Connect Server
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here. Keep in mind that this document reflects the latest branch, always. Support for versioned documentation is coming in the future.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OAuth2Client {
  /// Name is the human-readable string name of the client to be presented to the end-user during authorization.
  #[serde(rename = "client_name")]
  client_name: Option<String>,
  /// Secret is the client's secret. The secret will be included in the create request as cleartext, and then never again. The secret is stored using BCrypt so it is impossible to recover it. Tell your users that they need to write the secret down as it will not be made available again.
  #[serde(rename = "client_secret")]
  client_secret: Option<String>,
  /// ClientURI is an URL string of a web page providing information about the client. If present, the server SHOULD display this URL to the end-user in a clickable fashion.
  #[serde(rename = "client_uri")]
  client_uri: Option<String>,
  /// Contacts is a array of strings representing ways to contact people responsible for this client, typically email addresses.
  #[serde(rename = "contacts")]
  contacts: Option<Vec<String>>,
  /// GrantTypes is an array of grant types the client is allowed to use.
  #[serde(rename = "grant_types")]
  grant_types: Option<Vec<String>>,
  /// ID is the id for this client.
  #[serde(rename = "id")]
  id: Option<String>,
  /// LogoURI is an URL string that references a logo for the client.
  #[serde(rename = "logo_uri")]
  logo_uri: Option<String>,
  /// Owner is a string identifying the owner of the OAuth 2.0 Client.
  #[serde(rename = "owner")]
  owner: Option<String>,
  /// PolicyURI is a URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
  #[serde(rename = "policy_uri")]
  policy_uri: Option<String>,
  /// Public is a boolean that identifies this client as public, meaning that it does not have a secret. It will disable the client_credentials grant type for this client if set.
  #[serde(rename = "public")]
  public: Option<bool>,
  /// RedirectURIs is an array of allowed redirect urls for the client, for example http://mydomain/oauth/callback .
  #[serde(rename = "redirect_uris")]
  redirect_uris: Option<Vec<String>>,
  /// ResponseTypes is an array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.
  #[serde(rename = "response_types")]
  response_types: Option<Vec<String>>,
  /// Scope is a string containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
  #[serde(rename = "scope")]
  scope: Option<String>,
  /// TermsOfServiceURI is a URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
  #[serde(rename = "tos_uri")]
  tos_uri: Option<String>
}

impl OAuth2Client {
  pub fn new() -> OAuth2Client {
    OAuth2Client {
      client_name: None,
      client_secret: None,
      client_uri: None,
      contacts: None,
      grant_types: None,
      id: None,
      logo_uri: None,
      owner: None,
      policy_uri: None,
      public: None,
      redirect_uris: None,
      response_types: None,
      scope: None,
      tos_uri: None
    }
  }

  pub fn set_client_name(&mut self, client_name: String) {
    self.client_name = Some(client_name);
  }

  pub fn with_client_name(mut self, client_name: String) -> OAuth2Client {
    self.client_name = Some(client_name);
    self
  }

  pub fn client_name(&self) -> Option<&String> {
    self.client_name.as_ref()
  }

  pub fn reset_client_name(&mut self) {
    self.client_name = None;
  }

  pub fn set_client_secret(&mut self, client_secret: String) {
    self.client_secret = Some(client_secret);
  }

  pub fn with_client_secret(mut self, client_secret: String) -> OAuth2Client {
    self.client_secret = Some(client_secret);
    self
  }

  pub fn client_secret(&self) -> Option<&String> {
    self.client_secret.as_ref()
  }

  pub fn reset_client_secret(&mut self) {
    self.client_secret = None;
  }

  pub fn set_client_uri(&mut self, client_uri: String) {
    self.client_uri = Some(client_uri);
  }

  pub fn with_client_uri(mut self, client_uri: String) -> OAuth2Client {
    self.client_uri = Some(client_uri);
    self
  }

  pub fn client_uri(&self) -> Option<&String> {
    self.client_uri.as_ref()
  }

  pub fn reset_client_uri(&mut self) {
    self.client_uri = None;
  }

  pub fn set_contacts(&mut self, contacts: Vec<String>) {
    self.contacts = Some(contacts);
  }

  pub fn with_contacts(mut self, contacts: Vec<String>) -> OAuth2Client {
    self.contacts = Some(contacts);
    self
  }

  pub fn contacts(&self) -> Option<&Vec<String>> {
    self.contacts.as_ref()
  }

  pub fn reset_contacts(&mut self) {
    self.contacts = None;
  }

  pub fn set_grant_types(&mut self, grant_types: Vec<String>) {
    self.grant_types = Some(grant_types);
  }

  pub fn with_grant_types(mut self, grant_types: Vec<String>) -> OAuth2Client {
    self.grant_types = Some(grant_types);
    self
  }

  pub fn grant_types(&self) -> Option<&Vec<String>> {
    self.grant_types.as_ref()
  }

  pub fn reset_grant_types(&mut self) {
    self.grant_types = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> OAuth2Client {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_logo_uri(&mut self, logo_uri: String) {
    self.logo_uri = Some(logo_uri);
  }

  pub fn with_logo_uri(mut self, logo_uri: String) -> OAuth2Client {
    self.logo_uri = Some(logo_uri);
    self
  }

  pub fn logo_uri(&self) -> Option<&String> {
    self.logo_uri.as_ref()
  }

  pub fn reset_logo_uri(&mut self) {
    self.logo_uri = None;
  }

  pub fn set_owner(&mut self, owner: String) {
    self.owner = Some(owner);
  }

  pub fn with_owner(mut self, owner: String) -> OAuth2Client {
    self.owner = Some(owner);
    self
  }

  pub fn owner(&self) -> Option<&String> {
    self.owner.as_ref()
  }

  pub fn reset_owner(&mut self) {
    self.owner = None;
  }

  pub fn set_policy_uri(&mut self, policy_uri: String) {
    self.policy_uri = Some(policy_uri);
  }

  pub fn with_policy_uri(mut self, policy_uri: String) -> OAuth2Client {
    self.policy_uri = Some(policy_uri);
    self
  }

  pub fn policy_uri(&self) -> Option<&String> {
    self.policy_uri.as_ref()
  }

  pub fn reset_policy_uri(&mut self) {
    self.policy_uri = None;
  }

  pub fn set_public(&mut self, public: bool) {
    self.public = Some(public);
  }

  pub fn with_public(mut self, public: bool) -> OAuth2Client {
    self.public = Some(public);
    self
  }

  pub fn public(&self) -> Option<&bool> {
    self.public.as_ref()
  }

  pub fn reset_public(&mut self) {
    self.public = None;
  }

  pub fn set_redirect_uris(&mut self, redirect_uris: Vec<String>) {
    self.redirect_uris = Some(redirect_uris);
  }

  pub fn with_redirect_uris(mut self, redirect_uris: Vec<String>) -> OAuth2Client {
    self.redirect_uris = Some(redirect_uris);
    self
  }

  pub fn redirect_uris(&self) -> Option<&Vec<String>> {
    self.redirect_uris.as_ref()
  }

  pub fn reset_redirect_uris(&mut self) {
    self.redirect_uris = None;
  }

  pub fn set_response_types(&mut self, response_types: Vec<String>) {
    self.response_types = Some(response_types);
  }

  pub fn with_response_types(mut self, response_types: Vec<String>) -> OAuth2Client {
    self.response_types = Some(response_types);
    self
  }

  pub fn response_types(&self) -> Option<&Vec<String>> {
    self.response_types.as_ref()
  }

  pub fn reset_response_types(&mut self) {
    self.response_types = None;
  }

  pub fn set_scope(&mut self, scope: String) {
    self.scope = Some(scope);
  }

  pub fn with_scope(mut self, scope: String) -> OAuth2Client {
    self.scope = Some(scope);
    self
  }

  pub fn scope(&self) -> Option<&String> {
    self.scope.as_ref()
  }

  pub fn reset_scope(&mut self) {
    self.scope = None;
  }

  pub fn set_tos_uri(&mut self, tos_uri: String) {
    self.tos_uri = Some(tos_uri);
  }

  pub fn with_tos_uri(mut self, tos_uri: String) -> OAuth2Client {
    self.tos_uri = Some(tos_uri);
    self
  }

  pub fn tos_uri(&self) -> Option<&String> {
    self.tos_uri.as_ref()
  }

  pub fn reset_tos_uri(&mut self) {
    self.tos_uri = None;
  }

}



