/* 
 * ORY Hydra - Cloud Native OAuth 2.0 and OpenID Connect Server
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here. Keep in mind that this document reflects the latest branch, always. Support for versioned documentation is coming in the future.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ConsentRequest {
  /// ClientID is the client id that initiated the OAuth2 request.
  #[serde(rename = "clientId")]
  client_id: Option<String>,
  /// ExpiresAt is the time where the access request will expire.
  #[serde(rename = "expiresAt")]
  expires_at: Option<String>,
  /// ID is the id of this consent request.
  #[serde(rename = "id")]
  id: Option<String>,
  /// Redirect URL is the URL where the user agent should be redirected to after the consent has been accepted or rejected.
  #[serde(rename = "redirectUrl")]
  redirect_url: Option<String>,
  /// RequestedScopes represents a list of scopes that have been requested by the OAuth2 request initiator.
  #[serde(rename = "requestedScopes")]
  requested_scopes: Option<Vec<String>>
}

impl ConsentRequest {
  pub fn new() -> ConsentRequest {
    ConsentRequest {
      client_id: None,
      expires_at: None,
      id: None,
      redirect_url: None,
      requested_scopes: None
    }
  }

  pub fn set_client_id(&mut self, client_id: String) {
    self.client_id = Some(client_id);
  }

  pub fn with_client_id(mut self, client_id: String) -> ConsentRequest {
    self.client_id = Some(client_id);
    self
  }

  pub fn client_id(&self) -> Option<&String> {
    self.client_id.as_ref()
  }

  pub fn reset_client_id(&mut self) {
    self.client_id = None;
  }

  pub fn set_expires_at(&mut self, expires_at: String) {
    self.expires_at = Some(expires_at);
  }

  pub fn with_expires_at(mut self, expires_at: String) -> ConsentRequest {
    self.expires_at = Some(expires_at);
    self
  }

  pub fn expires_at(&self) -> Option<&String> {
    self.expires_at.as_ref()
  }

  pub fn reset_expires_at(&mut self) {
    self.expires_at = None;
  }

  pub fn set_id(&mut self, id: String) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: String) -> ConsentRequest {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&String> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_redirect_url(&mut self, redirect_url: String) {
    self.redirect_url = Some(redirect_url);
  }

  pub fn with_redirect_url(mut self, redirect_url: String) -> ConsentRequest {
    self.redirect_url = Some(redirect_url);
    self
  }

  pub fn redirect_url(&self) -> Option<&String> {
    self.redirect_url.as_ref()
  }

  pub fn reset_redirect_url(&mut self) {
    self.redirect_url = None;
  }

  pub fn set_requested_scopes(&mut self, requested_scopes: Vec<String>) {
    self.requested_scopes = Some(requested_scopes);
  }

  pub fn with_requested_scopes(mut self, requested_scopes: Vec<String>) -> ConsentRequest {
    self.requested_scopes = Some(requested_scopes);
    self
  }

  pub fn requested_scopes(&self) -> Option<&Vec<String>> {
    self.requested_scopes.as_ref()
  }

  pub fn reset_requested_scopes(&mut self) {
    self.requested_scopes = None;
  }

}



