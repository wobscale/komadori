/* 
 * ORY Hydra - Cloud Native OAuth 2.0 and OpenID Connect Server
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here. Keep in mind that this document reflects the latest branch, always. Support for versioned documentation is coming in the future.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Handler {
  #[serde(rename = "Generators")]
  generators: Option<::std::collections::HashMap<String, ::models::KeyGenerator>>,
  #[serde(rename = "H")]
  H: Option<::models::Writer>,
  #[serde(rename = "Manager")]
  manager: Option<::models::Manager>,
  #[serde(rename = "ResourcePrefix")]
  resource_prefix: Option<String>,
  #[serde(rename = "W")]
  W: Option<::models::Firewall>
}

impl Handler {
  pub fn new() -> Handler {
    Handler {
      generators: None,
      H: None,
      manager: None,
      resource_prefix: None,
      W: None
    }
  }

  pub fn set_generators(&mut self, generators: ::std::collections::HashMap<String, ::models::KeyGenerator>) {
    self.generators = Some(generators);
  }

  pub fn with_generators(mut self, generators: ::std::collections::HashMap<String, ::models::KeyGenerator>) -> Handler {
    self.generators = Some(generators);
    self
  }

  pub fn generators(&self) -> Option<&::std::collections::HashMap<String, ::models::KeyGenerator>> {
    self.generators.as_ref()
  }

  pub fn reset_generators(&mut self) {
    self.generators = None;
  }

  pub fn set_H(&mut self, H: ::models::Writer) {
    self.H = Some(H);
  }

  pub fn with_H(mut self, H: ::models::Writer) -> Handler {
    self.H = Some(H);
    self
  }

  pub fn H(&self) -> Option<&::models::Writer> {
    self.H.as_ref()
  }

  pub fn reset_H(&mut self) {
    self.H = None;
  }

  pub fn set_manager(&mut self, manager: ::models::Manager) {
    self.manager = Some(manager);
  }

  pub fn with_manager(mut self, manager: ::models::Manager) -> Handler {
    self.manager = Some(manager);
    self
  }

  pub fn manager(&self) -> Option<&::models::Manager> {
    self.manager.as_ref()
  }

  pub fn reset_manager(&mut self) {
    self.manager = None;
  }

  pub fn set_resource_prefix(&mut self, resource_prefix: String) {
    self.resource_prefix = Some(resource_prefix);
  }

  pub fn with_resource_prefix(mut self, resource_prefix: String) -> Handler {
    self.resource_prefix = Some(resource_prefix);
    self
  }

  pub fn resource_prefix(&self) -> Option<&String> {
    self.resource_prefix.as_ref()
  }

  pub fn reset_resource_prefix(&mut self) {
    self.resource_prefix = None;
  }

  pub fn set_W(&mut self, W: ::models::Firewall) {
    self.W = Some(W);
  }

  pub fn with_W(mut self, W: ::models::Firewall) -> Handler {
    self.W = Some(W);
    self
  }

  pub fn W(&self) -> Option<&::models::Firewall> {
    self.W.as_ref()
  }

  pub fn reset_W(&mut self) {
    self.W = None;
  }

}



