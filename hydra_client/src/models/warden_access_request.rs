/* 
 * ORY Hydra - Cloud Native OAuth 2.0 and OpenID Connect Server
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here. Keep in mind that this document reflects the latest branch, always. Support for versioned documentation is coming in the future.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct WardenAccessRequest {
  /// Action is the action that is requested on the resource.
  #[serde(rename = "action")]
  action: Option<String>,
  /// Context is the request's environmental context.
  #[serde(rename = "context")]
  context: Option<::std::collections::HashMap<String, Value>>,
  /// Resource is the resource that access is requested to.
  #[serde(rename = "resource")]
  resource: Option<String>,
  /// Subejct is the subject that is requesting access.
  #[serde(rename = "subject")]
  subject: Option<String>
}

impl WardenAccessRequest {
  pub fn new() -> WardenAccessRequest {
    WardenAccessRequest {
      action: None,
      context: None,
      resource: None,
      subject: None
    }
  }

  pub fn set_action(&mut self, action: String) {
    self.action = Some(action);
  }

  pub fn with_action(mut self, action: String) -> WardenAccessRequest {
    self.action = Some(action);
    self
  }

  pub fn action(&self) -> Option<&String> {
    self.action.as_ref()
  }

  pub fn reset_action(&mut self) {
    self.action = None;
  }

  pub fn set_context(&mut self, context: ::std::collections::HashMap<String, Value>) {
    self.context = Some(context);
  }

  pub fn with_context(mut self, context: ::std::collections::HashMap<String, Value>) -> WardenAccessRequest {
    self.context = Some(context);
    self
  }

  pub fn context(&self) -> Option<&::std::collections::HashMap<String, Value>> {
    self.context.as_ref()
  }

  pub fn reset_context(&mut self) {
    self.context = None;
  }

  pub fn set_resource(&mut self, resource: String) {
    self.resource = Some(resource);
  }

  pub fn with_resource(mut self, resource: String) -> WardenAccessRequest {
    self.resource = Some(resource);
    self
  }

  pub fn resource(&self) -> Option<&String> {
    self.resource.as_ref()
  }

  pub fn reset_resource(&mut self) {
    self.resource = None;
  }

  pub fn set_subject(&mut self, subject: String) {
    self.subject = Some(subject);
  }

  pub fn with_subject(mut self, subject: String) -> WardenAccessRequest {
    self.subject = Some(subject);
    self
  }

  pub fn subject(&self) -> Option<&String> {
    self.subject.as_ref()
  }

  pub fn reset_subject(&mut self) {
    self.subject = None;
  }

}



