/* 
 * ORY Hydra - Cloud Native OAuth 2.0 and OpenID Connect Server
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here. Keep in mind that this document reflects the latest branch, always. Support for versioned documentation is coming in the future.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct OAuth2ApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> OAuth2ApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> OAuth2ApiClient<C> {
        OAuth2ApiClient {
            configuration: configuration,
        }
    }
}

pub trait OAuth2Api {
    fn accept_o_auth2_consent_request(&self, id: &str, consent_request_acceptance: ::models::ConsentRequestAcceptance) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn create_o_auth2_client(&self, o_auth2_client: ::models::OAuth2Client) -> Box<Future<Item = ::models::OAuth2Client, Error = Error<serde_json::Value>>>;
    fn delete_o_auth2_client(&self, id: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn flush_inactive_o_auth2_tokens(&self, flush_inactive_o_auth2_tokens_request: ::models::FlushInactiveOAuth2TokensRequest) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_o_auth2_client(&self, id: &str) -> Box<Future<Item = ::models::OAuth2Client, Error = Error<serde_json::Value>>>;
    fn get_o_auth2_consent_request(&self, id: &str) -> Box<Future<Item = ::models::OAuth2ConsentRequest, Error = Error<serde_json::Value>>>;
    fn get_well_known(&self, ) -> Box<Future<Item = ::models::WellKnown, Error = Error<serde_json::Value>>>;
    fn introspect_o_auth2_token(&self, token: &str, scope: &str) -> Box<Future<Item = ::models::OAuth2TokenIntrospection, Error = Error<serde_json::Value>>>;
    fn list_o_auth2_clients(&self, limit: i64, offset: i64) -> Box<Future<Item = Vec<::models::OAuth2Client>, Error = Error<serde_json::Value>>>;
    fn oauth_auth(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn oauth_token(&self, ) -> Box<Future<Item = ::models::OauthTokenResponse, Error = Error<serde_json::Value>>>;
    fn reject_o_auth2_consent_request(&self, id: &str, consent_request_rejection: ::models::ConsentRequestRejection) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn revoke_o_auth2_token(&self, token: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn update_o_auth2_client(&self, id: &str, o_auth2_client: ::models::OAuth2Client) -> Box<Future<Item = ::models::OAuth2Client, Error = Error<serde_json::Value>>>;
    fn userinfo(&self, ) -> Box<Future<Item = ::models::UserinfoResponse, Error = Error<serde_json::Value>>>;
    fn well_known(&self, ) -> Box<Future<Item = ::models::JsonWebKeySet, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>OAuth2Api for OAuth2ApiClient<C> {
    fn accept_o_auth2_consent_request(&self, id: &str, consent_request_acceptance: ::models::ConsentRequestAcceptance) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/oauth2/consent/requests/{id}/accept".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_path_param("id".to_string(), id.to_string())
            .with_body_param(consent_request_acceptance)
            .returns_nothing(true)
            .execute(self.configuration.borrow())
    }

    fn create_o_auth2_client(&self, o_auth2_client: ::models::OAuth2Client) -> Box<Future<Item = ::models::OAuth2Client, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/clients".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_body_param(o_auth2_client)
            .execute(self.configuration.borrow())
    }

    fn delete_o_auth2_client(&self, id: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/clients/{id}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_path_param("id".to_string(), id.to_string())
            .returns_nothing(true)
            .execute(self.configuration.borrow())
    }

    fn flush_inactive_o_auth2_tokens(&self, flush_inactive_o_auth2_tokens_request: ::models::FlushInactiveOAuth2TokensRequest) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/oauth2/flush".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::Oauth)
            .with_body_param(flush_inactive_o_auth2_tokens_request)
            .returns_nothing(true)
            .execute(self.configuration.borrow())
    }

    fn get_o_auth2_client(&self, id: &str) -> Box<Future<Item = ::models::OAuth2Client, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/clients/{id}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_o_auth2_consent_request(&self, id: &str) -> Box<Future<Item = ::models::OAuth2ConsentRequest, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/oauth2/consent/requests/{id}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn get_well_known(&self, ) -> Box<Future<Item = ::models::WellKnown, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/.well-known/openid-configuration".to_string())
            .execute(self.configuration.borrow())
    }

    fn introspect_o_auth2_token(&self, token: &str, scope: &str) -> Box<Future<Item = ::models::OAuth2TokenIntrospection, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/oauth2/introspect".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::Oauth)
            .with_form_param("token".to_string(), token.to_string())
            .with_form_param("scope".to_string(), scope.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_o_auth2_clients(&self, limit: i64, offset: i64) -> Box<Future<Item = Vec<::models::OAuth2Client>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/clients".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_query_param("limit".to_string(), limit.to_string())
            .with_query_param("offset".to_string(), offset.to_string())
            .execute(self.configuration.borrow())
    }

    fn oauth_auth(&self, ) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/oauth2/auth".to_string())
            .returns_nothing(true)
            .execute(self.configuration.borrow())
    }

    fn oauth_token(&self, ) -> Box<Future<Item = ::models::OauthTokenResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/oauth2/token".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_auth(__internal_request::Auth::Oauth)
            .execute(self.configuration.borrow())
    }

    fn reject_o_auth2_consent_request(&self, id: &str, consent_request_rejection: ::models::ConsentRequestRejection) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Patch, "/oauth2/consent/requests/{id}/reject".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_path_param("id".to_string(), id.to_string())
            .with_body_param(consent_request_rejection)
            .returns_nothing(true)
            .execute(self.configuration.borrow())
    }

    fn revoke_o_auth2_token(&self, token: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/oauth2/revoke".to_string())
            .with_auth(__internal_request::Auth::Basic)
            .with_form_param("token".to_string(), token.to_string())
            .returns_nothing(true)
            .execute(self.configuration.borrow())
    }

    fn update_o_auth2_client(&self, id: &str, o_auth2_client: ::models::OAuth2Client) -> Box<Future<Item = ::models::OAuth2Client, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/clients/{id}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_path_param("id".to_string(), id.to_string())
            .with_body_param(o_auth2_client)
            .execute(self.configuration.borrow())
    }

    fn userinfo(&self, ) -> Box<Future<Item = ::models::UserinfoResponse, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/userinfo".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .execute(self.configuration.borrow())
    }

    fn well_known(&self, ) -> Box<Future<Item = ::models::JsonWebKeySet, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/.well-known/jwks.json".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .execute(self.configuration.borrow())
    }

}
