/* 
 * ORY Hydra - Cloud Native OAuth 2.0 and OpenID Connect Server
 *
 * Welcome to the ORY Hydra HTTP API documentation. You will find documentation for all HTTP APIs here. Keep in mind that this document reflects the latest branch, always. Support for versioned documentation is coming in the future.
 *
 * OpenAPI spec version: Latest
 * Contact: hi@ory.am
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PolicyApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PolicyApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PolicyApiClient<C> {
        PolicyApiClient {
            configuration: configuration,
        }
    }
}

pub trait PolicyApi {
    fn create_policy(&self, policy: ::models::Policy) -> Box<Future<Item = ::models::Policy, Error = Error<serde_json::Value>>>;
    fn delete_policy(&self, id: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>>;
    fn get_policy(&self, id: &str) -> Box<Future<Item = ::models::Policy, Error = Error<serde_json::Value>>>;
    fn list_policies(&self, offset: i64, limit: i64) -> Box<Future<Item = Vec<::models::Policy>, Error = Error<serde_json::Value>>>;
    fn update_policy(&self, id: &str, policy: ::models::Policy) -> Box<Future<Item = ::models::Policy, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>PolicyApi for PolicyApiClient<C> {
    fn create_policy(&self, policy: ::models::Policy) -> Box<Future<Item = ::models::Policy, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Post, "/policies".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_body_param(policy)
            .execute(self.configuration.borrow())
    }

    fn delete_policy(&self, id: &str) -> Box<Future<Item = (), Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Delete, "/policies/{id}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_path_param("id".to_string(), id.to_string())
            .returns_nothing(true)
            .execute(self.configuration.borrow())
    }

    fn get_policy(&self, id: &str) -> Box<Future<Item = ::models::Policy, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/policies/{id}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_path_param("id".to_string(), id.to_string())
            .execute(self.configuration.borrow())
    }

    fn list_policies(&self, offset: i64, limit: i64) -> Box<Future<Item = Vec<::models::Policy>, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Get, "/policies".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_query_param("offset".to_string(), offset.to_string())
            .with_query_param("limit".to_string(), limit.to_string())
            .execute(self.configuration.borrow())
    }

    fn update_policy(&self, id: &str, policy: ::models::Policy) -> Box<Future<Item = ::models::Policy, Error = Error<serde_json::Value>>> {
        __internal_request::Request::new(hyper::Method::Put, "/policies/{id}".to_string())
            .with_auth(__internal_request::Auth::Oauth)
            .with_path_param("id".to_string(), id.to_string())
            .with_body_param(policy)
            .execute(self.configuration.borrow())
    }

}
